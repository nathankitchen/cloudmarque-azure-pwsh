parameters:
- name: Release
  displayName: Release to Production
  type: boolean
  default: false

trigger:
- master

pool:
  vmImage: windows-latest

variables:
  moduleName: Cloudmarque.Azure
  createArtifacts: $[and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual')))]

stages:
- stage: Build
  displayName: Build Cloudmarque.Azure
  jobs:
  - job:
    steps:
    - task: PowerShell@2
      inputs:
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        failOnStderr: true
        errorActionPreference: Stop
        targetType: Inline
        script: |
          . .\$(moduleName)\Install-dependencies.ps1
          . .\init.ps1
          Sync-CloudmarqueAzure

- stage: Test
  displayName: Test Cloudmarque.Azure
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job:
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          . .\init.ps1
          Test-CloudmarqueAzure
    - task: PublishTestResults@2
      displayName: Publish Tests
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: '**/Publish/Tests/nunit-results.xml'
        failTaskOnFailedTests: true

- stage: CreateCloudmarqueDocumentationArtifact
  displayName: Create Cloudmarque Documentation Artifact
  dependsOn: Test
  condition: and(succeeded(), eq(variables.createArtifacts, true))
  jobs:
  - job:
    steps:
    - task: PowerShell@2
      displayName: Build Artifact
      inputs:
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        failOnStderr: true
        errorActionPreference: Stop
        targetType: Inline
        script: |
          . .\init.ps1
          . .\$(moduleName)\install-dependencies.ps1
          New-CloudmarqueAzureDocs
    - task: PublishPipelineArtifact@1
      displayName: Publish Artifact
      inputs:
        targetPath: publish/docs
        artifactName: docs
        publishLocation: Pipeline

    - task: PublishPipelineArtifact@1
      displayName: Publish Artifact
      inputs:
        targetPath: cloudmarque.azure/resources/schema
        artifactName: schema
        publishLocation: Pipeline

- stage: CreateCloudmarqueAzureModuleArtifact
  displayName: Create Cloudmarque.Azure Module Artifact
  dependsOn: Test
  condition: and(succeeded(), eq('${{ parameters.Release }}', true))
  jobs:
  - job:
    steps:
    - task: PublishPipelineArtifact@1
      displayName: Publish Module Artifact
      inputs:
        targetPath: $(moduleName)
        artifactName: $(moduleName)
        publishLocation: Pipeline

- stage: Release
  displayName: Release Cloudmarque.Azure
  dependsOn: CreateCloudmarqueAzureModuleArtifact
  condition: succeeded()
  jobs:
  - deployment:
    environment: Prod
    variables:
      releaseNotesPath: $(Build.StagingDirectory)/releaseNotes.txt
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            inputs:
              workingDirectory: $(Pipeline.Workspace)
              pwsh: true
              failOnStderr: true
              errorActionPreference: Stop
              targetType: Inline
              script: |

                . .\$(moduleName)\install-dependencies.ps1

                Publish-Module `
                  -Path $(moduleName) `
                  -NuGetApiKey $(NugetApiKey) `
                  -Repository PSGallery `
                  -SkipAutomaticTags `
                  -Force

                $dataFile = Import-PowerShellDataFile "$(moduleName)/$(moduleName).psd1"

                $isPreRelease = $false

                if($dataFile.privateData.psData.preRelease) {
                  $isPreRelease = $true
                }

                Set-Content $(releaseNotesPath) $dataFile.privateData.psData.releaseNotes

                Write-Host "##vso[task.setvariable variable=isPreRelease]$($isPreRelease)"
                Write-Host "##vso[task.setvariable variable=version]$($dataFile.moduleVersion)"

          - task: GitHubRelease@1
            inputs:
              gitHubConnection: 'Trustmarque Github'
              repositoryName: 'Trustmarque/cloudmarque-azure-pwsh'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'userSpecifiedTag'
              tag: 'v$(version)'
              title: '$(moduleName) $(version)'
              releaseNotesFilePath: '$(releaseNotesPath)'
              assets: '$(Build.ArtifactStagingDirectory)/$(version)/*'
              isPreRelease: $(isPreRelease)
              addChangeLog: false