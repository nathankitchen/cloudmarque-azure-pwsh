parameters:
- name: Iaas
  type: boolean
  default: true
- name: IaasNSP
  type: boolean
  default: true
- name: Paas
  type: boolean
  default: true
- name: Monitor
  type: boolean
  default: true
- name: Security
  type: boolean
  default: true
- name: TearDown
  type: boolean
  default: true

variables:
  moduleName: Cloudmarque.Azure
  environment: Integration

stages:
- stage: Core
  jobs:
  - job:
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)" `
            -Verbose

          New-CmAzDeployment -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/core.yml" `
          -TagSettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/_tags/coreTags.yml" `
          -Verbose

- stage: Iaas_NSP
  displayName: Iaas - Network, Storage and Private Endpoints
  condition: and(succeeded(), eq('${{ parameters.IaasNSP }}', true))
  dependsOn: Core
  jobs:
  - job: IaasStorage
    displayName: Iaas - Storage
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)" `
            -Verbose

          New-CmAzDeployment -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/storage.yml" -Verbose

  - job: IaasNetwork
    displayName: Iaas - Networking
    dependsOn: IaasStorage
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)" `
            -Verbose

          New-CmAzDeployment `
            -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/networking/yml/networking.yml" `
            -TagSettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/_tags/neworkTags.yml" `
            -Verbose `
            -Confirm:$false

  - job: IaasPrivateEndpoint
    displayName: Iaas - Private Endpoints
    dependsOn: IaasNetwork
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)" `
            -Verbose

          New-CmAzDeployment -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/privateendpoints.yml" `
                      -TagSettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/_tags/neworkTags.yml" `
                      -Verbose

  - job: Extension_and_Policies
    displayName: Extension & Policies
    dependsOn: IaasNetwork
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)" `
            -Verbose

          New-CmAzDeployment -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/extensions/extension.yml" -Verbose
          New-CmAzDeployment -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/policies/securityPolicies.yml" -Verbose


- stage: Paas
  condition: and(succeeded(), eq('${{ parameters.Paas }}', true))
  dependsOn: Iaas_NSP
  jobs:
  - job:
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "development" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)" `
            -Verbose

          # Below resources are not being deployed because of known cdn api issue with Set-AzResource in Set-CmAzTag
          # New-CmazPaasWeb -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/web.yml" -Verbose
          # New-CmazPaasWebStatic -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/webstatic.yml" -Verbose
          New-AzResourceGroup -Name "Web-Test-Rg" -location uksouth -tag @{'cm-service' = "Web-Test-Rg"; 'cm-integration-nnet-test-delete' = "true" } -Force
          New-CmAzDeployment -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/sql.yml" -Verbose

- stage: Iaas
  condition: and(succeeded(), eq('${{ parameters.Iaas }}', true))
  dependsOn: [Iaas_NSP]
  jobs:
  - job: IaasVmPatchVault
    displayName: Iaas - Vms, Recovery Vaults and Patching
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)" `
            -Verbose

          New-CmAzDeployment `
            -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/virtualmachines.yml" `
            -LocalAdminUsername (ConvertTo-SecureString $(AdminUsername) -AsPlainText -Force) `
            -LocalAdminPassword (ConvertTo-SecureString $(AdminPassword) -AsPlainText -Force) `
            -Verbose

          New-CmAzDeployment `
            -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/recoveryvault.yml" `
            -PolicySettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/recoverypolicy.yml" `
            -Verbose

          Set-CmAzIaasUpdateManagement -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/updateManagement.yml" -Verbose

  - job: IaasBastion
    displayName: Iaas - Bastion Host
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)"  `
            -Verbose

          New-CmAzIaasBastionHost -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/bastionHost.yml" -Verbose

  - job: IaasVPN
    displayName: Iaas - VPN Gateway
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)"  `
            -Verbose

          New-CmAzIaasBastionHost -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/bastionHost.yml" -Verbose

- stage: Security
  condition: and(succeeded(), eq('${{ parameters.Security }}', true))
  dependsOn: Core
  jobs:
  - job:
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)" `
            -Verbose

          New-CmAzDeployment -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/security.yml" -Debug

- stage: Monitor
  dependsOn: [
    "Iaas",
    "Paas"
  ]
  condition: and(eq('${{ parameters.Monitor }}', true), in(dependencies.Iaas.result, 'Succeeded'), in(dependencies.Paas.result, 'Succeeded'))
  jobs:
  - job:
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)" `
            -Verbose

          New-CmAzDeployment -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/alerts/log.yml" -Verbose -Confirm:$false
          New-CmAzDeployment -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/alerts/metric.yml" -Verbose -Confirm:$false
          New-CmAzDeployment -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/alerts/resourceHealth.yml" -verbose -Confirm:$false
          New-CmAzDeployment -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/alerts/activityLog.yml" -verbose -Confirm:$false
          New-CmAzDeployment -SettingsFile "$(Build.SourcesDirectory)/$(moduleName)/Resources/Project/Integration/alerts/serviceHealth.yml" -verbose -Confirm:$false

- stage: TearDown
  dependsOn: [
    "Iaas_NSP",
    "Iaas",
    "Paas",
    "Security",
    "Monitor"
  ]
  condition: and(always(), eq('${{ parameters.TearDown }}', true))
  displayName: Tear Down
  jobs:
  - job: DeleteNonNet
    displayName: Delete Other Resources
    steps:
     - task: AzurePowerShell@5
       inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)" `
            -Verbose

          Write-Verbose "Resetting security membership..."
          $resourceTypes = @("VirtualMachines", "AppServices", "SqlServers", "SqlServerVirtualMachines", "StorageAccounts", "KubernetesService", "ContainerRegistry", "KeyVaults")

          forEach ($resourceType in $resourceTypes) {
            Set-AzSecurityPricing -Name $resourceType -PricingTier "Free"
          }

          do {

            Write-Verbose "Removing tagged resources..."
            $errorThrown = $false

            Write-Verbose "Fetching resource groups.."
            $resources = Get-CmAzService -ServiceKey "cm-integration-nnet-test-delete" -Service "true" -IsResourceGroup -Verbose

            $resources | ForEach-Object {

              try {
                Remove-AzResourceGroup -Name $_.resourceGroupName -Verbose -Force
              }
              catch {
                $errorThrown = $true
              }
            }

          }
          while ($errorThrown)

  - job: DeleteNet
    displayName: Delete Networking Resources
    dependsOn: [
      "DeleteNonNet"
    ]
    steps:
     - task: AzurePowerShell@5
       inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)" `
            -Verbose

          do {

            Write-Verbose "Removing tagged resources..."
            $errorThrown = $false

            Write-Verbose "Fetching resource groups.."
            $resources = Get-CmAzService -ServiceKey "cm-integration-net-test-delete" -Service "true" -IsResourceGroup -Verbose

            $resources | ForEach-Object {

              try {
                Remove-AzResourceGroup -Name $_.resourceGroupName -Verbose -Force
              }
              catch {
                $errorThrown = $true
              }
            }

          }
          while ($errorThrown)

  - job: DeleteCore
    displayName: Delete Core Resources
    dependsOn: [
      "DeleteNonNet"
    ]
    steps:
     - task: AzurePowerShell@5
       inputs:
        azureSubscription: $(ServiceConnection)
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true
        errorActionPreference: Stop
        ScriptType: InlineScript
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        Inline: |

          ./Initialise-Cloudmarque.ps1 `
            -ProjectDirectory "$(Build.SourcesDirectory)" `
            -Environment "$(environment)" `
            -BuildNumber "$(Build.BuildNumber)" `
            -RepositoryName "$(Build.Repository.Name)" `
            -DefinitionName "$(Build.DefinitionName)" `
            -DefinitionVersion "$(Build.DefinitionVersion)" `
            -Verbose

          do {

            Write-Verbose "Removing tagged resources..."
            $errorThrown = $false

            Write-Verbose "Fetching resource groups.."
            $resources = Get-CmAzService -ServiceKey "cm-integration-core-test-delete" -Service "true" -IsResourceGroup -Verbose

            $resources | ForEach-Object {

              try {
                Remove-AzResourceGroup -Name $_.resourceGroupName -Verbose -Force
              }
              catch {
                $errorThrown = $true
              }
            }

          }
          while ($errorThrown)

